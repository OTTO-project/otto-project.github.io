{"componentChunkName":"component---packages-gatsby-theme-documentation-src-templates-doc-js","path":"/dev-guide/itc","webpackCompilationHash":"31aa79a225afdfde3806","result":{"data":{"doc":{"id":"553ec59e-95b3-50cc-b31e-bf4d04d3a235","title":"","description":null,"excerpt":"Inter-Thread Communication Actions Actions are at the center of the inter-thread communication model used in OTTO. The are the \"packagesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"inter-thread-communication\"\n  }, \"Inter-Thread Communication\"), mdx(\"h2\", {\n    \"id\": \"actions\"\n  }, \"Actions\"), mdx(\"p\", null, \"Actions are at the center of the inter-thread communication model used in OTTO. The are the \\\"packages\\\" that are sent between threads.\"), mdx(\"p\", null, \"An action is defined as a type alias to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::Action<Tag, Args...>\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" is a unique tag type per action, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Args...\"), \" is an arbitrary number of arguments passed with the action.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"struct Actions {\\n  /// Set the sample buffer.\\n  /// Sent whenever the sample buffer should change.\\n  /// @param buffer the location of the new sample data. Allocated from the audio pool.\\n  using set_sample_buffer = itc::Action<struct set_sample_action, gsl::span<float>>;\\n  //    ~~~~~~~ A ~~~~~~~               ~~~~~~~~~~~ B ~~~~~~~~~~  ~~~~~~~ C ~~~~~~\\n};\\n\")), mdx(\"p\", null, \"In the action defined above, the action has the name (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \") \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_sample_buffer\"), \". The unusual syntax at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" declares a tag type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_sample_action\"), \", which will never be defined. Since the tag type is only used to differentiate the action types, this type is never used for anything else\"), mdx(\"p\", null, \"User-defined actions are usually defined in an Actions struct in the engine namespace. \"), mdx(\"h2\", {\n    \"id\": \"action-recievers\"\n  }, \"Action Recievers\"), mdx(\"p\", null, \"Actions are recieved and handled by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action recievers\"), \". These can be any class that specifies an \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action handler\"), \" for the given action. The most common examples of action recievers are the engine's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Audio\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Screen\"), \" objects. These recieve information from the engine by recieving actions.\"), mdx(\"p\", null, \"One can check whether a class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" is an action reciever for the action \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" using the type trait \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::ActionReciever::is<T, A>\"), \".\"), mdx(\"h2\", {\n    \"id\": \"action-handlers\"\n  }, \"Action handlers\"), mdx(\"p\", null, \"Specific actions are handled in the recievers by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action handlers\"), \" (the terminology isn't terribly important). They are member functions of the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action reciever\"), \", which are called \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action\"), \", and take the type of the action (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \") as the first parameter, and the actions arguments (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \") as the following parameters. \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"void action(Actions::rotation_variable, std::atomic<float>& v) noexcept;\\n//          ~~~~~~~~~~~ A ~~~~~~~~~~~~  ~~~~~~~~~ B ~~~~~~~~~ \\nvoid action(itc::prop_change<&Props::leslie>, float l) noexcept;\\n//          ~~~~~~~~~~~~~~~~ D ~~~~~~~~~~~~~  ~~ B ~~\\n\")), mdx(\"h2\", {\n    \"id\": \"actionsender\"\n  }, \"ActionSender\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Inter-Thread Communication"},{"value":"Actions"},{"value":"Action Recievers"},{"value":"Action handlers"},{"value":"ActionSender"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"553ec59e-95b3-50cc-b31e-bf4d04d3a235","slug":"/dev-guide/itc","previous":{"id":"a5ea87bf-78ae-5467-8c70-6804e8d6f988","slug":"/dev-guide"},"next":{"id":"9e2f7bca-4657-5d79-b4a6-fea62edf9082","slug":"/"}}}}