{"componentChunkName":"component---src-templates-doc-js","path":"/docs/ui-guidelines","webpackCompilationHash":"8187993ccac577055cd6","result":{"data":{"doc":{"id":"05d5ceeb-e216-5195-b62b-d12fcc29f4b5","title":"OTTO Graphics Design","description":null,"excerpt":"OTTO Graphics Design This guide lays out some general guidelines for designing graphics for the OTTO. Some things are firm, other things aâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"otto-graphics-design\"\n  }, \"OTTO Graphics Design\"), mdx(\"p\", null, \"This guide lays out some general guidelines for designing graphics for the OTTO. Some things are firm, other things a bit less so.\\nFirst part of the guide is about the technical side, while the main part of this guide is concerned with design guidelines.\"), mdx(\"h2\", {\n    \"id\": \"technical-details\"\n  }, \"Technical details\"), mdx(\"h3\", {\n    \"id\": \"vector-graphics\"\n  }, \"Vector Graphics\"), mdx(\"p\", null, \"We draw everything with vector graphics. This sets the biggest limitations on the kind of graphics we can make. Currently, we are using NanoVG with a wrapper that looks a lot like HTML5 Canvas.\\nExporting designs to Canvas is good and can speed the whole implementation up greatly. Adobe Illustrator can use this script:\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://blog.mikeswanson.com/ai2canvas\"\n  }), \"Pre-compiled plugins\"), \" are the easiest to use. (If you want to compile it yourself, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/mikeswanson/Ai2Canvas\"\n  }), \"click here.\"), \" ).\"), mdx(\"p\", null, \"Inkscape 1.0 is also getting good at exporting to Canvas.\"), mdx(\"h3\", {\n    \"id\": \"animation\"\n  }, \"Animation\"), mdx(\"p\", null, \"We use Choreograph to animate the graphics. This means animations should be (fairly) easy to parametrize, since the library just controls the change of single parameters over time. \"), mdx(\"h2\", {\n    \"id\": \"design\"\n  }, \"Design\"), mdx(\"h3\", {\n    \"id\": \"basic-design\"\n  }, \"Basic Design\"), mdx(\"p\", null, \"The screen resolution is 320*240. The background is black.\"), mdx(\"h3\", {\n    \"id\": \"font\"\n  }, \"Font\"), mdx(\"p\", null, \"We use Roboto, medium weight. Fontsizes vary, but it is good to make it a bit bigger than what you would think would be necessary on your computer screen.\\nWe are transitioning to the use of ALL CAPS for text.\"), mdx(\"h3\", {\n    \"id\": \"shapes\"\n  }, \"Shapes\"), mdx(\"p\", null, \"We try to keep shapes kind of simple - not least because of the low resolution. Furthermore we try to give everything with a colour some space around it, so it doesn't clash with other coloured elements\"), mdx(\"h3\", {\n    \"id\": \"rounded-corners\"\n  }, \"Rounded Corners\"), mdx(\"p\", null, \"Having rounded corners makes everything look a bit more smooth. There\\u2019s not a specific amount that is used, it depends what looks good on the object you\\u2019re making. Just try and make sure that nothing looks too \\u2018sharp\\u2019, but everything stays clean and polished/smooth.\"), mdx(\"h3\", {\n    \"id\": \"lines\"\n  }, \"Lines\"), mdx(\"p\", null, \"Most lines used in OTTO is a 6.0 (pt) thickness line. Thicknesses below 4.0pt is too thin, and we fear that this would be too \\u2018fragile\\u2019 on the display used for the OTTO. Make sure everything keeps having a clean look, not a cluttered mess.\\nOne other thing worth mentioning is that all lines in Otto have rounded endcaps. \"), mdx(\"h3\", {\n    \"id\": \"dotted-lines--grids\"\n  }, \"Dotted Lines / Grids\"), mdx(\"p\", null, \"Dotted lines are hard to code. So we prefer to stay away from them if possible. \"), mdx(\"h3\", {\n    \"id\": \"use-of-colour\"\n  }, \"Use of Colour\"), mdx(\"p\", null, \"With Otto we\\u2019re trying to use a default set of colours, to give the style a really continuous feel. Currently these colours are:\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Main colours\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Blue - #189CD9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Green - #94C11F\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Yellow - #FBB80B\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Red - #E5352B\")), mdx(\"p\", null, \"These are used because they correspond to physical encoders on the machine. Also used are varying shades of grey and pink, but they have to work well with the main colours.\"), mdx(\"h3\", {\n    \"id\": \"quirck\"\n  }, \"Quirck.\"), mdx(\"p\", null, \"There are no rules to the amount of quirck in the Otto, really. We try to keep it playful, but functional.\"), mdx(\"p\", null, \"Please feel free to comment or expand on the above in the dicord server!\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"OTTO Graphics Design"},{"value":"Technical details"},{"value":"Vector Graphics"},{"value":"Animation"},{"value":"Design"},{"value":"Basic Design"},{"value":"Font"},{"value":"Shapes"},{"value":"Rounded Corners"},{"value":"Lines"},{"value":"Dotted Lines / Grids"},{"value":"Use of Colour"},{"value":"Quirck."}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"05d5ceeb-e216-5195-b62b-d12fcc29f4b5","slug":"/docs/ui-guidelines","prev":{"id":"cd32f503-87dc-5e65-92c1-d16b3a4e465a","slug":"/docs/yocto"},"next":{"id":"33a4b869-a9d7-5c86-8b3a-ec26e3802352","slug":"/docs"}}}}