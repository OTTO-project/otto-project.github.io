{"componentChunkName":"component---src-templates-doc-js","path":"/docs/yocto","webpackCompilationHash":"c38e0e186556b91873c1","result":{"data":{"doc":{"id":"cd32f503-87dc-5e65-92c1-d16b3a4e465a","title":"OTTO Yocto Development","description":null,"excerpt":"OTTO Yocto Development The OTTO linux distro is built using yocto, and based on  poky  . The root board support package is available onâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"otto-yocto-development\"\n  }, \"OTTO Yocto Development\"), mdx(\"p\", null, \"The OTTO linux distro is built using yocto, and based on \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.yoctoproject.org/software-item/poky/\"\n  }), \"poky\"), \" . The root board support package is available on github \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/otto-project/otto-bsp\"\n  }))), mdx(\"h2\", {\n    \"id\": \"description\"\n  }, \"Description\"), mdx(\"p\", null, \"otto-bsp is intended to provide OTTO developers an easy to setup environment for OpenEmbedded/Yocto project development. This respository is set up with git submodules to link together all of the required BSP layers. In addition, a Vagrantfile is provided for those who do not already have Linux systems ready to quickly get started via a virtual machine.\"), mdx(\"h2\", {\n    \"id\": \"getting-started-without-an-existing-linux-system\"\n  }, \"Getting started without an existing Linux system\"), mdx(\"p\", null, \"If you do not already have a linux system available for development, you can use the supplied Vagrantfile. It will automatically set up an Ubuntu 18.10 based system with all the required dependencies and automatically download the source repository. You can download Vagrant from \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.vagrantup.com/\"\n  }), \"https://www.vagrantup.com/\"), \". If you would like to allocate more/less memory and CPU resources to the virtual machine, make sure to modify the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VM_MEMORY\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"VM_CORES\"), \" lines in the Vagrantfile prior to performing the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"vagrant up\"), \" command.\\nAt the moment, Virtualbox is supported. It must be installed prior to running this command.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"vagrant up --provider=virtualbox\\nvagrant ssh\\n\")), mdx(\"h2\", {\n    \"id\": \"getting-started-with-an-existing-linux-system\"\n  }, \"Getting started with an existing Linux system\"), mdx(\"p\", null, \"If you already have a linux system available for development, the dependencies for development are as follows:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"gawk wget git-core diffstat unzip texinfo gcc-multilib build-essential chrpath socat libsdl1.2-dev xterm repo\\n\")), mdx(\"p\", null, \"Once those are installed, you are ready to download the source:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"git clone --recurse-submodules -b zeus https://github.com/OTTO-project/otto-bsp.git\\n\")), mdx(\"p\", null, \"Once the source is downloaded, you are ready to set up your local build directory and initiate a build:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"MACHINE=otto-proto-v1 DISTRO=otto source setup-environment build\\nbitbake otto-image\\n\")), mdx(\"p\", null, \"Relative to the build folder, your compiled image will be located at\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"build/tmp/deploy/images/otto-proto-v1/otto-image-otto-proto-v1.rpi-sdimg\\n\")), mdx(\"p\", null, \"This image can be imaged to your SD card with the following command (where /dev/sdX is your sdcard), executed from the build folder:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"sudo dd if=tmp/deploy/images/otto-proto-v1/otto-image-otto-proto-v1.rpi-sdimg of=/dev/sdX bs=1M && sync\\n\")), mdx(\"p\", null, \"At this point, the OTTO should be able to boot.\"), mdx(\"h2\", {\n    \"id\": \"meta-otto\"\n  }, \"meta-otto\"), mdx(\"p\", null, \"The otto-bsp repository exists to set up the build environment. The recipes which define the image build are located in the Yocto layer \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/otto-project/meta-otto\"\n  }), \"meta-otto\")), mdx(\"h2\", {\n    \"id\": \"connecting-to-wifi\"\n  }, \"Connecting to wifi\"), mdx(\"p\", null, \"To connect the OTTO to WiFi over command line:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Start connmanctl interactive shell:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"connmanctl\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Enable WiFi and scan for access points. Wait for a response from the program before performing additional commands. Scanning and connecting take some time.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"connmanctl> enable wifi\\nEnabled wifi\\nconnmanctl> scan wifi\\nScan completed for wifi\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"List access points and connect to the \\\"service\\\" matching your Wifi SSID. Tab autocomplete works on service names.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"connmanctl> services\\n  <Your SSID>    wifi_<blahblahblah>_<blahblahblah>_managed_psk\\nconnmanctl> agent on\\nAgent registered\\nconnmanctl> connect wifi_<blahblahblah>_<blahblahblah>_managed_psk\\nPassphrase? <your WiFi passphrase>\\nConnected wifi_<blahblahblah>_<blahblahblah>_managed_psk\\n\")), mdx(\"h2\", {\n    \"id\": \"using-devtool\"\n  }, \"Using devtool\"), mdx(\"p\", null, \"Devtool is useful for making modifications to some code, cross compiling, then deploying to the target to test without having to recompile the image. Here's how you'd normally use it for something like otto-core:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"First make sure your bitbake environment is set up and you are in your build folder (see above first if you do not know what this means):\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"source setup-environment build\\n\")), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Create a local source directory of the recipe you want to modify.\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"devtool modify otto-core\\n\")), mdx(\"ol\", {\n    \"start\": 3\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Modify the source in build/workspace/sources/otto-core\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build the source\"))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"devtool build otto-core\\n\")), mdx(\"ol\", {\n    \"start\": 5\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make sure your target system is on and connected to the internet. See \", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#connecting-to-wifi\"\n  }), \"Connecting to WiFi\"), \" page for more information. You can get the IP address by running\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"hostname -i\\n\")), mdx(\"p\", null, \"from the target.\"), mdx(\"ol\", {\n    \"start\": 6\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Deploy the application to the target\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"devtool deploy-target -s otto-core root@<ip_address>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"OTTO Yocto Development"},{"value":"Description"},{"value":"Getting started without an existing Linux system"},{"value":"Getting started with an existing Linux system"},{"value":"meta-otto"},{"value":"Connecting to wifi"},{"value":"Using devtool"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"cd32f503-87dc-5e65-92c1-d16b3a4e465a","slug":"/docs/yocto","prev":{"id":"ba904349-6a30-5d70-a6b0-bd1c35c92164","slug":"/docs/dev-guide/cpp-guidelines"},"next":{"id":"33a4b869-a9d7-5c86-8b3a-ec26e3802352","slug":"/docs"}}}}