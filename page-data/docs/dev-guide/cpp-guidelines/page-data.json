{"componentChunkName":"component---src-templates-doc-js","path":"/docs/dev-guide/cpp-guidelines","webpackCompilationHash":"8187993ccac577055cd6","result":{"data":{"doc":{"id":"ba904349-6a30-5d70-a6b0-bd1c35c92164","title":"C++ Guidelines","description":null,"excerpt":"C++ Guidelines clang-format For consistent formatting, we use  clang-format . The repo contains a  .clang-format  file, and  clang-formatâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"c-guidelines\"\n  }, \"C++ Guidelines\"), mdx(\"h2\", {\n    \"id\": \"clang-format\"\n  }, \"clang-format\"), mdx(\"p\", null, \"For consistent formatting, we use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clang-format\"), \". The repo contains a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \".clang-format\"), \" file, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clang-format\"), \" should be run on every file before each commit. We recommend getting an integration for your editor, plugins should be available for most.\"), mdx(\"p\", null, \"In the future, we will set up CI to not accept incorrectly formatted code!\"), mdx(\"h2\", {\n    \"id\": \"doxygen-documentation-comments\"\n  }, \"Doxygen documentation comments\"), mdx(\"p\", null, \"We strive to add doxygen-style documentation comments to all declarations. There \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is\"), \" an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://otto-project.github.io/OTTO/\"\n  }), \"auto-generated doxygen site\"), \" for the latest develop branch, but the most important use of these comments is in-code documentation, and in-editor documentation popups. Our preferred documentation comment style is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"///\"), \", and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@\"), \" for doxygen commands:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"/// Triggers a new voice. \\n/// \\n/// @param midi_note base frequency.\\n/// @param detune is multiplied on frequency\\n/// @param legato controls legato on envelope + on_note_on. \\n///        If `true`, `on_note_on` will not be called.\\n/// @param jump controls legato for portamento\\n///        If `true`, portamento will not be applied.\\nvoid trigger(int midi_note, float detune, float velocity, bool legato, bool jump) noexcept;\\n\")), mdx(\"h2\", {\n    \"id\": \"noexcept-everything-on-audio-thread\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"h2\"\n  }, \"noexcept\"), \" everything on audio thread\"), mdx(\"p\", null, \"Everything on the audio thread \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"has\"), \" to be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noexcept\"), \", and in general, it should be used as much as possible. Get used to using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noexcept\"), \" by default, and only omitting it when explicitly using exceptions.\"), mdx(\"h2\", {\n    \"id\": \"range-based-implementations-of-standard-algorithms\"\n  }, \"Range-based implementations of standard algorithms\"), mdx(\"p\", null, \"We have range-based implementations of all standard algorithms available in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"util/algorithms.hpp\"), \". These should be preferred over the iterator based versions whenever possible.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"auto found = util::find_if(voices, [&] (auto& v) { return v.midi_note() == note; });\\nif (found != voices.end()) {\\n  // do things\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"C++ Guidelines"},{"value":"clang-format"},{"value":"Doxygen documentation comments"},{"value":"noexcept everything on audio thread"},{"value":"Range-based implementations of standard algorithms"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"ba904349-6a30-5d70-a6b0-bd1c35c92164","slug":"/docs/dev-guide/cpp-guidelines","prev":{"id":"b621a31f-8e7f-526b-83bb-fd010fc3c434","slug":"/docs/dev-guide/itc"},"next":{"id":"cd32f503-87dc-5e65-92c1-d16b3a4e465a","slug":"/docs/yocto"}}}}