{"componentChunkName":"component---src-templates-doc-js","path":"/docs/dev-guide/engines","webpackCompilationHash":"3334b9c7b500c9e72dd6","result":{"data":{"doc":{"id":"72e4b63c-1328-5766-98a4-5bb48e6f529d","title":"Writing Engines","description":null,"excerpt":"Writing Engines Engines is the term for the Arpeggiators (or MIDI effects), Synthesizers and Audio effects in OTTO. There is one slot for anâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"writing-engines\"\n  }, \"Writing Engines\"), mdx(\"p\", null, \"Engines is the term for the Arpeggiators (or MIDI effects), Synthesizers and Audio effects in OTTO. There is one slot for an active arpeggiator, one slot for a synthesizer, and two slots for active audio effects. The signal flow always has the arpeggiator going into the synth. The audio effects function as effects busses, meaning that everything in OTTO that makes sound can be routed to the effects in various amounts.\"), mdx(\"p\", null, \"For the arpeggiator and the audio effect slots, there is a specific \\\"null-engine\\\" that corresponds to an inactive slot.\"), mdx(\"p\", null, \"An engine is split in three parts:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The Engine struct, usually named for the engine, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Goss\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Wormhole\"), \". This contains the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Properties\"), \" which are basically the \\\"engine settings\\\" that are changed with the encoder input and serialized for saving either when shutting down OTTO or for presets, etc. The encoder input is also handed by this struct.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Audio\"), \" struct which runs on the audio thread. This owns everything that has to do with handling MIDI events and generating audio. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Screen\"), \" struct which runs on the graphics thread. This owns everything having to do with drawing the graphics on the screen.\")), mdx(\"h2\", {\n    \"id\": \"properties\"\n  }, \"Properties\"), mdx(\"h2\", {\n    \"id\": \"screens\"\n  }, \"Screens\"), mdx(\"h2\", {\n    \"id\": \"audio\"\n  }, \"Audio\"));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Writing Engines"},{"value":"Properties"},{"value":"Screens"},{"value":"Audio"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"72e4b63c-1328-5766-98a4-5bb48e6f529d","slug":"/docs/dev-guide/engines","prev":{"id":"b621a31f-8e7f-526b-83bb-fd010fc3c434","slug":"/docs/dev-guide/itc"},"next":{"id":"ba904349-6a30-5d70-a6b0-bd1c35c92164","slug":"/docs/dev-guide/cpp-guidelines"}}}}