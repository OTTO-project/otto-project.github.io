{"componentChunkName":"component---src-templates-doc-js","path":"/docs/dev-guide/itc","webpackCompilationHash":"d2c9714aa9ee603d5aa5","result":{"data":{"doc":{"id":"b621a31f-8e7f-526b-83bb-fd010fc3c434","title":"Inter-Thread Communication","description":null,"excerpt":"Inter-Thread Communication In practice, this is mostly used with the  props  library, but it is important to understand the basics of how itâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Note = makeShortcode(\"Note\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"inter-thread-communication\"\n  }, \"Inter-Thread Communication\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"In practice, this is mostly used with the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"props\"\n  }), \"props\"), \" library, but it is important to understand the basics of how it works\")), mdx(\"p\", null, \"A central part of the OTTO software, is the communication between threads. This is implemented in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"otto::itc\"), \" namespace, of which the basic contents are described below.\"), mdx(\"h2\", {\n    \"id\": \"actions\"\n  }, \"Actions\"), mdx(\"p\", null, \"Actions are at the center of the inter-thread communication model used in OTTO. The are the \\\"packages\\\" that are sent between threads.\"), mdx(\"p\", null, \"An action is defined as a type alias to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::Action<Tag, Args...>\"), \" where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tag\"), \" is a unique tag type per action, and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Args...\"), \" is an arbitrary number of arguments passed with the action.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"struct Actions {\\n  /// Set the sample buffer.\\n  /// Sent whenever the sample buffer should change.\\n  /// @param buffer the location of the new sample data. Allocated from the audio pool.\\n  using set_sample_buffer = itc::Action<struct set_sample_buffer_tag, gsl::span<float>>;\\n  //    ~~~~~~~ A ~~~~~~~               ~~~~~~~~~~~ B ~~~~~~~~~~  ~~~~~~~ C ~~~~~~\\n  \\n  using reset = itc::Action<struct reset_tag>;\\n  //    ~ A ~               ~~~~~~ B ~~~~~~~\\n};\\n\")), mdx(\"p\", null, \"In the action defined above, the action has the name (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \") \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_sample_buffer\"), \". The unusual syntax at \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"B\"), \" declares a tag type \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"set_sample_buffer_tag\"), \", which will never be defined. Since the tag type is only used to differentiate the action types, this type is never used for anything else\"), mdx(\"p\", null, \"User-defined actions are usually defined in an Actions struct in the engine namespace, but most actions are sent by properties.\"), mdx(\"h2\", {\n    \"id\": \"action-receivers\"\n  }, \"Action Receivers\"), mdx(\"p\", null, \"Actions are received and handled by \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"action receivers\"), \". These are classes that extend \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::ActionReceiver<...>\"), \" (or usually \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::ActionReceiverOnBus<Bus, ...>\"), \"), where \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"...\"), \" can be either\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a single action type (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Action<Tag, Args...>\"), \")\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"multiple action types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"meta::list\"), \" of action types\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"a (nested) combination of the above.\")), mdx(\"p\", null, \"When implementing an action receiver, one must implement the virtual handler function \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"action(Action<Tag, Args...>, Args...)\"), \" for each action in the action list.\"), mdx(\"h4\", {\n    \"id\": \"example\"\n  }, \"Example:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-cpp\"\n  }), \"struct Audio final : itc::ActionReceiver<Actions::set_sample_buffer, Actions::reset> {\\n  \\n  void action(Actions::set_sample_buffer, gsl::span<float> buffer) noexcept final;\\n  void action(Actions::reset) noexcept final;\\n}\\n\")), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, \"Always mark action handlers as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"final\"), \", and preferably the whole class as well. Avoid using an inheritance hierarchy of receivers if possible, and consider \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Composition_over_inheritance\"\n  }), \"composition\"), \" instead.\")), mdx(\"p\", null, \"One can check whether a class \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"T\"), \" is an action receiver for the action \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"A\"), \" using the type trait \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::is_action_receiver_v<T, A>\"), \".\"), mdx(\"h2\", {\n    \"id\": \"actionbus\"\n  }, \"ActionBus\"), mdx(\"p\", null, \"To receive actions, a receiver must be registered on a bus. The bus contains a runtime registry of receivers for each action, and a queue of actions to send to all registered receivers. The cannonical way to register a receiver, is by extending \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::ActionReceiverOnBus<BusTag, Actions...>\"), \" instead of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::ActionReceiver<Actions...>\"), \". This class registers and unregisters itself on the bus identified by \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BusTag\"), \" for all \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actions...\"), \", and supports the same types for the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actions...\"), \" parameter.\"), mdx(\"p\", null, \"Currently, the OTTO contains 3 busses, identified by the following three tag types:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"itc::AudioBus\"), \": Queued actions are handled on the audio thread before each new audio buffer.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"itc::GraphicsBus\"), \": Queued actions are handled on the GUI thread before each frame.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"itc::LogicBus\"), \": Queued actions are handled on the main logic thread in a continuous event loop.\")), mdx(\"p\", null, \"One can send actions directly to one or more busses using the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itc::send_to_bus<Busses...>(Action, Args...)\"), \" function. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Busses...\"), \" parameter pack follows the same convention as the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Actions...\"), \" paramter to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ActionReceiver\"), \", that is, it can be any nested combination of bus tag types and lists of these.\"), mdx(Note, {\n    mdxType: \"Note\"\n  }, mdx(\"p\", null, \"  Most actions are sent by \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"props\"\n  }), \"properties\"), \", which by default send to the audio and graphics busses\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Inter-Thread Communication"},{"value":"Actions"},{"value":"Action Receivers"},{"value":"Example:"},{"value":"ActionBus"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"b621a31f-8e7f-526b-83bb-fd010fc3c434","slug":"/docs/dev-guide/itc","prev":{"id":"aaeaa4db-40cc-5acb-a647-395613e8f066","slug":"/docs/dev-guide/props"},"next":{"id":"ba904349-6a30-5d70-a6b0-bd1c35c92164","slug":"/docs/dev-guide/cpp-guidelines"}}}}