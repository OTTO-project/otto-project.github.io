{"componentChunkName":"component---src-templates-doc-js","path":"/docs/compiling","webpackCompilationHash":"8187993ccac577055cd6","result":{"data":{"doc":{"id":"c3bfcc96-49a8-5fcf-b36e-24c020e63e0b","title":"Compiling and Running OTTO","description":null,"excerpt":"Compiling and Running OTTO OTTO uses a couple of C++20 features, so you need a new compliant C++ compiler. This basically means  clang >= 1â€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Warning = makeShortcode(\"Warning\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"compiling-and-running-otto\"\n  }, \"Compiling and Running OTTO\"), mdx(\"p\", null, \"OTTO uses a couple of C++20 features, so you need a new compliant C++ compiler. This basically means \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clang >= 10.0\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GCC >= 10.2\"), \". For the same reason, you will need \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake >= 3.12\"), \".\"), mdx(\"p\", null, \"Please read first the OS specific instructions ( \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#linux\"\n  }), \"Linux\"), \", \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#osx\"\n  }), \"OSX\"), \" ) on how to install the dependencies, and finally the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#build\"\n  }), \"Build and run the OTTO\"), \" below. We also have some \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#developer\"\n  }), \"hints for developers\"), \" and a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#troubleshoot\"\n  }), \"Troubleshoot\"), \" section.\"), mdx(\"h2\", {\n    \"id\": \"linux\"\n  }, \"Linux\"), mdx(\"p\", null, \"You should be able to adapt the debian/ubuntu specific instructions below to your distro. If you do so, feel free to write up a guide and put it here.\"), mdx(\"h3\", {\n    \"id\": \"debian--ubuntu\"\n  }, \"Debian / Ubuntu\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Install the runtime dependencies.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"apt install libasound2-dev libxrandr-dev libxinerama-dev libxcursor-dev libgl1-mesa-dev libxi-dev\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"The OTTO requires a very new C++ compiler. If you don't have any of these, google how to get it for your specific distro version.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"  sudo apt install gcc-10\\n# sudo apt install clang-10\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Remember to set these environment variables to the correct paths, so cmake picks up the right compiler.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"  export CC=gcc-10 CXX=g++-10\\n# export CC=clang-10 CXX=clang++-10\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Those of course have to be set in every new shell you open, so consider adding them to your \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"~/.profile\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You will also need cmake 3.12 or above.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"    sudo apt install cmake\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Confirm the version to make sure it is current enough.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cmake --version\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Move on to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#build\"\n  }), \"build and run the OTTO\")))), mdx(\"h2\", {\n    \"id\": \"osx\"\n  }, \"OSX\"), mdx(Warning, {\n    mdxType: \"Warning\"\n  }, \"This info might be outdated!\"), mdx(\"p\", null, \"On OSX, you need at least clang 9, with its corresponding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"libc++\"), \" implementation. You can install it from source, or using a package manager like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://brew.sh/\"\n  }), \"homebrew\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.macports.org/\"\n  }), \"macports\"), \".\"), mdx(\"h3\", {\n    \"id\": \"get-dependencies-using-homebrew\"\n  }, \"Get dependencies using Homebrew\"), mdx(\"p\", null, \"Open a terminal and run the following commands:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"install homebrew:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"/usr/bin/ruby -e \\\"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\\\"\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"If not already installed, install XCode's command tools:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"xcode-select --install\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"install the dependencies and prepare your environment:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"# Install dependencies (cmake 3.12+ and clang 9 and git)\\nbrew install llvm cmake git\\n\\n# add llvm/clang to your PATH:\\necho 'export PATH=\\\"/usr/local/opt/llvm/bin:$PATH\\\"' >> ~/.bash_profile\\n\\n# Use these exports on every new shell you want to compile OTTO (or add them to your ~/.bash_profile)\\nexport CC=clang\\nexport CXX=clang++\\nexport CXXFLAGS=\\\"-I/usr/local/opt/llvm/include -I/usr/local/include\\\"\\nexport LDFLAGS=\\\"-L/usr/local/lib $(brew info llvm | grep LDFLAGS= | cut -d = -f 2 | tr '\\\"' ' ' | head -1 )\\\"\\n\\n# To confirm that you've exported these variables correctly, call\\n$CXX --version\\n\\n# You should see something like clang version 9.x.x\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Move on to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#build\"\n  }), \"build and run the OTTO\")))), mdx(\"h2\", {\n    \"id\": \"windows\"\n  }, \"Windows\"), mdx(\"p\", null, \"OTTO can be built on Windows under WSL2. It is not so useful for testing on the PC, since audio support is still quite lacking on WSL2. But other than that, it is tested to be compiling on Ubuntu 20.04 in WSL2. If you succeed in getting audio to work, please let us know!\"), mdx(\"h1\", {\n    \"id\": \"build-and-run-the-otto-for-all-os\"\n  }, \"Build and run the OTTO (for all OS')\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Clone the OTTO repo to your local drive:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"git clone https://github.com/otto-project/OTTO\\ncd OTTO\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Configure the build:\\nthe following command will print a lot of lines. If your setup is correct you should see a line with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"The CXX compiler identification is Clang X.X.X.X \"), \" or similar.\\nYou can pass a couple of configure options to cmake, to see a list, run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake -LH\"), \". For example, to disable the debug ui, configure otto with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake .. -DOTTO_DEBUG_UI=OFF\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"mkdir build\\ncd build\\ncmake ..\\ncd ..\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Build\\nIf cmake ran correctly, you should now be able to simply run \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"cmake --build build\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Start OTTO in the root of the git clone. In case you compiled OTTO in another directory (f.ex. build), make sure you still run it from the root of the clone, since it depends on the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" folder at runtime.\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"build/bin/otto\\n\")))), mdx(\"h1\", {\n    \"id\": \"a-namedevelopera-hints-for-developers\"\n  }, mdx(\"a\", {\n    name: \"developer\"\n  }), \" Hints for developers\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To run the test set:\"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"build/bin/test\\n\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"To recompile OTTO:\\nNormally it's enough to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake --build build\"), \" again, but sometimes (for example when you add new files) you have to run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cmake ..\"), \" from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"build\"), \" again. When you do so, make sure the correct environment variables are set. If something has really gone wrong with cmake, you can clear its cache by running \"), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"rm -rf build/CMakeFiles build/CMakeCache.txt\\n\")))), mdx(\"h1\", {\n    \"id\": \"a-href-nametroubleshoota-troubleshoot\"\n  }, mdx(\"a\", {\n    href: true,\n    name: \"troubleshoot\"\n  }), \" Troubleshoot\"), mdx(\"h2\", {\n    \"id\": \"linux-1\"\n  }, \"Linux\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Error \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"GLX: Failed to create context: GLXBadFBConfig\"), \":\\nCheck the OpenGL Version your driver supports with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"glxinfo | grep version\"), \". You will see an output similar to:\", mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"server glx version string: 1.4\\nclient glx version string: 1.4\\nGLX version: 1.4\\nOpenGL version string: 2.1 Mesa 10.1.3\\nOpenGL shading language version string: 1.20\\n\")), \"Here the supported OpenGL version is 2.1. The current OTTO graphics implementation needs an OpenGL Version of 3.3 or more. Try to update your graphic card driver.\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Compiling and Running OTTO"},{"value":"Linux"},{"value":"Debian / Ubuntu"},{"value":"OSX"},{"value":"Get dependencies using Homebrew"},{"value":"Windows"},{"value":"Build and run the OTTO (for all OS')"},{"value":"<a name=\"developer\"></a> Hints for developers"},{"value":"<a href name=\"troubleshoot\"></a> Troubleshoot"},{"value":"Linux"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"c3bfcc96-49a8-5fcf-b36e-24c020e63e0b","slug":"/docs/compiling","prev":{"id":"33a4b869-a9d7-5c86-8b3a-ec26e3802352","slug":"/docs"},"next":null}}}